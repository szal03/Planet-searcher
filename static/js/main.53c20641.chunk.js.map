{"version":3,"sources":["components/Header.js","components/HeroImg.js","components/SearchInput.js","components/PlanetInfoWindow.js","components/PlanetCard.js","components/App.js","serviceWorker.js","index.js"],"names":["StartHeader","className","SearchHeader","props","searchStatus","onClick","click","Header","status","statusForSearch","HeroImg","Info","SearchInput","showInfo","show","type","vaule","value","onChange","change","submitSearch","onMouseEnter","onMouseLeave","hideInfo","PlanetInfoWindow","Modal","size","aria-labelledby","centered","modalShow","onHide","modalHide","closeButton","Title","id","Body","Row","Col","xs","info","data","title","src","links","href","description","Footer","Button","PlanetCard","planets","map","item","index","sm","md","lg","xl","key","nasa_id","undefined","style","backgroundImage","Container","showInfoWindow","searchObject","API","App","state","inputValue","searchValue","statusSearch","failSearchStatus","showBasicInfo","handleSearchInput","e","setState","target","handleSumbmitValue","alert","query","fetch","then","response","ok","Error","json","collection","items","length","catch","error","console","log","handleBackButton","handleShowInfo","filter","elem","handleHideInfo","handleChangeTrue","handleChangeFalse","searchActive","this","name","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.53c20641.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './style/Header.css';\r\n\r\nconst StartHeader = () => {\r\n    return (\r\n        <div className=\"mainHeader\">\r\n            <h1>Start your journey through space</h1>\r\n            <h2>Discover places you have never been before</h2>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst SearchHeader = (props) => {\r\n    const searchStatus = props.searchStatus;\r\n    return (\r\n        <div className=\"searchHeader\">\r\n            <div>\r\n                <h1>Planet Searcher</h1>\r\n                {searchStatus ? <div className=\"failSearchMessage\"><h2>there is no search results... </h2></div> : null}\r\n            </div>\r\n            <button className=\"backButton\" onClick={props.click}>Back</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Header = (props) => {\r\n    const status = props.statusForSearch;\r\n    const searchStatus = props.searchStatus;\r\n    return (\r\n        <div>\r\n            {status ? <SearchHeader click={props.click} searchStatus={searchStatus} /> : <StartHeader />}\r\n        </div>\r\n    )\r\n}\r\nexport default Header;","import React from \"react\";\r\nimport './style/HeroImg.css'\r\n\r\nconst HeroImg = () =>{\r\n    return(\r\n        <div className=\"heroImg\"></div>\r\n    )\r\n}\r\n\r\nexport default HeroImg;","import React from \"react\";\r\nimport './style/SearchInput.css'\r\n\r\nconst Info = () => {\r\n    return (\r\n        <div className=\"infoInBox\"><span>Enter the name of the planet or star you are interested in. As a result, you will receive photos with descriptions.</span></div>\r\n    )\r\n}\r\n\r\n\r\nconst SearchInput = (props) => {\r\n    const showInfo = props.show;\r\n    return (\r\n        <div className=\"searchInput\">\r\n            <input type=\"text\" vaule={props.value} onChange={props.change} />\r\n            <button className=\"searchButton\" onClick={props.submitSearch}>Search</button>\r\n            <div className=\"infoBox\" onMouseEnter={props.showInfo} onMouseLeave={props.hideInfo}>\r\n                <span>info</span>\r\n            </div>\r\n            {showInfo ? <Info /> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput;\r\n","import React from \"react\";\r\nimport './style/PlanetInfoWindow.css';\r\nimport { Row, Container, Col, Modal, Button, ModalHeader } from 'react-bootstrap';\r\n\r\nconst PlanetInfoWindow = (props) => {\r\n    return (\r\n        <Modal\r\n            size=\"lg\"\r\n            aria-labelledby=\"contained-modal-title-vcenter\"\r\n            centered\r\n            show={props.modalShow}\r\n            onHide={props.modalHide}\r\n        >\r\n            <Modal.Header closeButton>\r\n                <Modal.Title id=\"contained-modal-title-vcenter\">\r\n                    More Info\r\n            </Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body className=\"showModal\">\r\n                <Row>\r\n                    <Col xs={12}>\r\n                        <h4>{props.info[0].data[0].title}</h4>\r\n                    </Col>\r\n                    <Col xs={6}>\r\n                        <img src={props.info[0].links[0].href} />\r\n                    </Col>\r\n                    <Col xs={6} className=\"textInModal\">\r\n                        <p>\r\n                            {props.info[0].data[0].description}\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button className=\"closeBtn\" onClick={props.modalHide}>Close</Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default PlanetInfoWindow;\r\n","import React from \"react\";\r\nimport './style/PlanetCard.css';\r\nimport { Row, Container, Col, Modal } from 'react-bootstrap';\r\nimport PlanetInfoWindow from \"./PlanetInfoWindow\";\r\n\r\n\r\nconst PlanetCard = (props) => {\r\n    const planets = props.data.map((item, index) => (\r\n\r\n        <Col xs={12} sm={12} md={6} lg={4} xl={4} key={index} onClick={() => props.showInfo(item.data[0].nasa_id)}>\r\n            <div className=\"planetBox\" >\r\n                <div className=\"planetInBox\">\r\n                    {item.links !== undefined ? <div><div className=\"backgroundImgStyle\" style={{ backgroundImage: `url(${item.links[0].href})` }}></div>\r\n                        <div className=\"titleStyle\">{item.data[0].title}</div>\r\n                    </div> : null}\r\n                </div>\r\n            </div>\r\n        </Col>\r\n\r\n    ))\r\n    return <>\r\n        <Container>\r\n            {props.showInfoWindow ? <PlanetInfoWindow info={props.searchObject} modalShow={props.showInfoWindow} modalHide={props.hideInfo} /> : null}\r\n            <Row>{planets}</Row>\r\n        </Container></>\r\n\r\n}\r\nexport default PlanetCard;","import React from 'react';\r\nimport './style/App.css';\r\nimport Header from \"./Header\";\r\nimport HeroImg from \"./HeroImg\";\r\nimport SearchInput from \"./SearchInput\";\r\nimport PlanetCard from \"./PlanetCard\";\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport PlanetInfoWindow from \"./PlanetInfoWindow\";\r\n\r\nconst API = 'https://images-api.nasa.gov/search';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        inputValue: \"\",\r\n        searchValue: [],\r\n        statusSearch: false,\r\n        failSearchStatus: false,\r\n        searchObject: [],\r\n        showInfoWindow: false,\r\n        showBasicInfo: false,\r\n    }\r\n\r\n    handleSearchInput = (e) => {\r\n        this.setState({\r\n            inputValue: e.target.value,\r\n        })\r\n    }\r\n    handleSumbmitValue = () => {\r\n        if (this.state.inputValue === \"\") {\r\n            return alert(\"need to write something\")\r\n        }\r\n        const query = `${API}?q=${this.state.inputValue}`;\r\n        fetch(query).then(response => {\r\n            if (response.ok) {\r\n                return response\r\n            }\r\n            throw Error(response.status)\r\n        }).then(response => response.json())\r\n            .then(data => {\r\n                if (data.collection.items.length > 0) {\r\n                    this.setState({\r\n                        searchValue: data.collection.items,\r\n                        statusSearch: true,\r\n                    })\r\n                }\r\n                else {\r\n                    this.setState({\r\n                        failSearchStatus: true,\r\n                        statusSearch: true,\r\n                    })\r\n                }\r\n            })\r\n            .catch(error => console.log(error))\r\n    }\r\n    handleBackButton = () => {\r\n        this.setState({\r\n            inputValue: \"\",\r\n            searchValue: [],\r\n            statusSearch: false,\r\n            failSearchStatus: false,\r\n        })\r\n    }\r\n\r\n    handleShowInfo = (id) => {\r\n        const collection = this.state.searchValue;\r\n        const searchObject = collection.filter(elem => elem.data[0].nasa_id === id);\r\n        const showInfoWindow = true;\r\n        this.setState({\r\n            searchObject,\r\n            showInfoWindow: true,\r\n        })\r\n    }\r\n\r\n    handleHideInfo = () => {\r\n        this.setState({\r\n            showInfoWindow: false,\r\n        })\r\n    }\r\n\r\n    handleChangeTrue = () => {\r\n        this.setState({\r\n            showBasicInfo: true,\r\n        })\r\n    }\r\n\r\n    handleChangeFalse = () => {\r\n        this.setState({\r\n            showBasicInfo: false,\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const searchActive = this.state.statusSearch;\r\n        const searchStatus = this.state.failSearchStatus;\r\n        const searchObject = this.state.searchObject;\r\n        const showInfoWindow = this.state.showInfoWindow;\r\n        const showBasicInfo = this.state.showBasicInfo;\r\n        return (\r\n            <div className=\"App\">\r\n                <Header statusForSearch={this.state.statusSearch} click={this.handleBackButton} searchStatus={searchStatus} />\r\n                <HeroImg />\r\n                {searchActive ? null : <SearchInput\r\n                    value={this.state.inputValue}\r\n                    change={this.handleSearchInput}\r\n                    submitSearch={this.handleSumbmitValue}\r\n                    show={showBasicInfo}\r\n                    showInfo={this.handleChangeTrue}\r\n                    hideInfo={this.handleChangeFalse} />}\r\n                <div className=\"contentContainer\">\r\n                    <div className=\"cardsContainer\">\r\n                        {searchActive ? <PlanetCard data={this.state.searchValue}\r\n                            name={this.state.inputValue}\r\n                            showInfo={this.handleShowInfo}\r\n                            searchObject={searchObject}\r\n                            showInfoWindow={showInfoWindow}\r\n                            hideInfo={this.handleHideInfo} /> : null}\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}